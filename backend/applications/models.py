import datetime
# Import UserMixin and RoleMixin from Flask-Security
from flask_security import UserMixin, RoleMixin
# Import db instance from your database setup file
from applications.database import db

# Association Table for User-Role Many-to-Many relationship (Required by Flask-Security)
user_roles = db.Table('user_roles',
    db.Column('user_id', db.Integer(), db.ForeignKey('user.id')),
    db.Column('role_id', db.Integer(), db.ForeignKey('role.id'))
)

class Role(db.Model, RoleMixin):
    """
    Represents a user role (e.g., 'admin', 'user').
    Inherits RoleMixin for Flask-Security compatibility.
    """
    __tablename__ = 'role'

    id = db.Column(db.Integer(), primary_key=True)
    name = db.Column(db.String(80), unique=True, nullable=False) # Role name (e.g., 'admin')
    description = db.Column(db.String(255)) # Optional description

    def __repr__(self):
        return f'<Role {self.name}>'

class User(db.Model, UserMixin):
    """
    Represents a user account.
    Inherits UserMixin for Flask-Security compatibility.
    """
    __tablename__ = 'user'

    id = db.Column(db.Integer, primary_key=True)
    # Use 'email' for login if preferred by Flask-Security config, otherwise 'username'
    # Check your user_datastore setup if using email vs username. Assuming username for now.
    username = db.Column(db.String(80), unique=True, nullable=False)
    # IMPORTANT: Field must be named 'password' for Flask-Security's default hashing/verification
    password = db.Column(db.String(255), nullable=False) # Stores the hash generated by Flask-Security
    email = db.Column(db.String(120), unique=True, nullable=True) # Unique email is good practice
    created_at = db.Column(db.DateTime, default=datetime.datetime.utcnow) # Track creation time
    # Required fields for Flask-Security:
    active = db.Column(db.Boolean()) # Is the user account active?
    fs_uniquifier = db.Column(db.String(64), unique=True, nullable=False) # Security stamp

    # Relationship to Role model via the user_roles association table
    roles = db.relationship('Role', secondary=user_roles,
                            backref=db.backref('users', lazy='dynamic'))

    # Relationship to Watchlist items (One-to-Many)
    watchlist_items = db.relationship('Watchlist', backref='owner', lazy=True, cascade='all, delete-orphan')

    # REMOVED custom set_password and check_password methods.
    # Flask-Security (via user_datastore.create_user and utils.verify_password) handles hashing.

    def __repr__(self):
        return f'<User {self.username}>'

class Watchlist(db.Model):
    """
    Represents a stock ticker saved by a user.
    """
    __tablename__ = 'watchlist'

    id = db.Column(db.Integer, primary_key=True)
    # Foreign Key linking back to the User who owns this item
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    ticker = db.Column(db.String(10), nullable=False) # Stock symbol
    notes = db.Column(db.String(200), nullable=True) # Optional user notes
    added_at = db.Column(db.DateTime, default=datetime.datetime.utcnow) # Track when added

    # Ensure a specific user cannot add the same ticker multiple times
    __table_args__ = (db.UniqueConstraint('user_id', 'ticker', name='_user_ticker_uc'),)

    def to_dict(self):
        """Helper method to convert object to dictionary for JSON serialization."""
        return {
            "id": self.id,
            "ticker": self.ticker,
            "notes": self.notes if self.notes else "",
            "user_id": self.user_id,
            "added_at": self.added_at.isoformat() if self.added_at else None
        }

    def __repr__(self):
        return f'<Watchlist Ticker:{self.ticker} UserID:{self.user_id}>'

